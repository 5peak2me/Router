apply plugin: 'maven'
apply plugin: 'signing'

if (!project.ext.has('GROUP') || !project.ext.has('ARTIFACT') || !project.ext.has('VERSION')) {
    throw new MissingPropertyException("Extra properties['GROUP', 'ARTIFACT', 'VERSION'] are required.")
}

boolean isAndroidModule = false
boolean isJavaModule = false
if (project.plugins.hasPlugin('com.android.library')) {
    isAndroidModule = true
} else if (project.plugins.hasPlugin('java')) {
    isJavaModule = true
} else {
    throw new UnknownPluginException('Just support android/java projects now.')
}

// task to generate source.jar
task sourcesJar(type: Jar) {
    group 'build'
    archiveClassifier.set('sources')
}

// task to generate javadoc
if (isAndroidModule) {
    sourcesJar {
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        group 'documentation'
        options.encoding = 'UTF-8'
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }
} else if (isJavaModule) {
    sourcesJar {
        from sourceSets.main.java.srcDirs
    }

    javadoc {
        options.encoding = 'UTF-8'
        failOnError false
    }
}

// task to generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    group 'build'
    from javadoc.getDestinationDir()
    archiveClassifier.set('javadoc')
}

artifacts {
    if (isJavaModule) {
        archives jar
    }
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
            }
            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                if (isAndroidModule) {
                    packaging 'aar'
                } else if (isJavaModule) {
                    packaging 'jar'
                }
                groupId project.ext.GROUP
                artifactId project.ext.ARTIFACT
                version project.ext.VERSION
                name "${project.ext.GROUP}:${project.ext.ARTIFACT}"
                description 'Awesome android router library.'
                url 'https://github.com/chenenyu/Router'
                scm {
                    url 'https://github.com/chenenyu/Router'
                    connection 'scm:git@github.com:chenenyu/Router.git'
                    developerConnection 'scm:git@github.com:chenenyu/Router.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'chenenyu'
                        name 'chenenyu'
                        email 'chenenyux@gmail.com'
                    }
                }
            }
        }
    }
}
